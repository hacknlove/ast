{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["timer","keyPressed","audio","Audio","document","body","addEventListener","event","key","toLocaleLowerCase","App","useState","green","setgreen","status","setstatus","console","log","clearTimeout","greenTimer","yellowTimer","redTimer","clapTimer","pause","currentTime","getElementById","requestFullscreen","play","id","className","onSubmit","e","preventDefault","setTimeout","src","type","value","toFixed","onChange","target","onClick","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sQAGMA,G,MAAQ,CACZC,WADY,eAIRC,EAAQ,IAAIC,MAAM,gBAExBC,SAASC,KAAKC,iBAAiB,YAAY,SAAAC,GACzCP,EAAMC,WAAWM,EAAMC,IAAIC,wBAmHdC,MAhHf,WAAgB,IAAD,EACaC,mBAAS,GADtB,mBACNC,EADM,KACCC,EADD,OAEeF,mBAAS,QAFxB,mBAENG,EAFM,KAEEC,EAFF,KAsFb,OAlFAC,QAAQC,IAAIL,GAEZZ,EAAMC,WAAa,SAAAO,GAQjB,OAPAU,aAAalB,EAAMmB,YACnBD,aAAalB,EAAMoB,aACnBF,aAAalB,EAAMqB,UACnBH,aAAalB,EAAMsB,WACnBpB,EAAMqB,QACNrB,EAAMsB,YAAc,EAEZhB,GACN,IAAK,IACHO,EAAU,QACV,MACF,IAAK,IACHA,EAAU,MACV,MACF,IAAK,IACHA,EAAU,SACV,MACF,IAAK,IACHA,EAAU,OACV,MACF,IAAK,IACHA,EAAU,UACV,MACF,IAAK,IAEH,YADAX,SAASqB,eAAe,QAAQC,oBAElC,IAAK,IACHxB,EAAMyB,OACNZ,EAAU,SACV,MACF,QAEE,YADAC,QAAQC,IAAIT,KAgDVM,GACN,IAAK,OACH,OACE,0BAAMc,GAAG,MAAMC,UAAU,OAAOC,SA9CtC,SAAgBC,GAEd,GADAA,EAAEC,kBACGpB,EACH,OAeFZ,EAAMqB,SAAWY,YAAW,kBAAMlB,EAAU,SAAQ,KACpDf,EAAMsB,UAAYW,YAAW,WAC3B/B,EAAMyB,OACNZ,EAAU,WACT,KAEHX,SAASqB,eAAe,QAAQC,yBAChCX,EAAU,MApBVf,EAAMmB,WAAac,YAAW,kBAAMlB,EAAU,WAAkB,GAARH,EAAa,KACrEZ,EAAMoB,YAAca,YAAW,kBAAMlB,EAAU,YAA0B,KAAbH,EAAQ,GAAU,KAC9EZ,EAAMqB,SAAWY,YAAW,kBAAMlB,EAAU,SAAuB,KAAbH,EAAQ,GAAU,KACxEZ,EAAMsB,UAAYW,YAAW,WAC3B/B,EAAMyB,OACNZ,EAAU,WACQ,KAAfH,EAAQ,KAAY,KAEzBR,SAASqB,eAAe,QAAQC,oBAChCX,EAAU,QAiCJ,6BACE,yBAAKmB,IAAI,aACT,2BAAOC,KAAK,SAASC,MAAOxB,EAAMyB,QAAQ,GAAIC,SAAU,SAAAP,GAAC,OAAIlB,GAAUkB,EAAEQ,OAAOH,MAAQ,QACxF,2CAIR,IAAK,QACH,OACE,yBAAKI,QA5BX,WACEtC,EAAMqB,QACNrB,EAAMsB,YAAc,EACpBT,EAAU,SAyBkBa,GAAG,MAAMC,UAAU,SAA3C,aAIJ,QACE,OACE,yBAAKW,QA3BX,WACEtB,aAAalB,EAAMmB,YACnBD,aAAalB,EAAMoB,aACnBF,aAAalB,EAAMqB,UACnBH,aAAalB,EAAMsB,WACnBP,EAAU,SAsBca,GAAG,MAAMC,UAAWf,GACrCA,KC3GS2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS3C,SAASqB,eAAe,SD6H3C,kBAAmBuB,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e808a254.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nconst timer = {\n  keyPressed () {}\n}\n\nconst audio = new Audio('./app-30.mp3');\n\ndocument.body.addEventListener('keypress', event => {\n  timer.keyPressed(event.key.toLocaleLowerCase())\n})\n\nfunction App() {\n  const [green, setgreen] = useState(3)\n  const [status, setstatus] = useState('STOP')\n\n  console.log(green)\n\n  timer.keyPressed = key => {\n    clearTimeout(timer.greenTimer)\n    clearTimeout(timer.yellowTimer)\n    clearTimeout(timer.redTimer)\n    clearTimeout(timer.clapTimer)\n    audio.pause();\n    audio.currentTime = 0;\n\n    switch (key) {\n      case 'e':\n        setstatus('STOP')\n        break\n      case 's':\n        setstatus('ok')\n        break\n      case 'g':\n        setstatus('green')\n        break\n      case 'r':\n        setstatus('red')\n        break\n      case 'y':\n        setstatus('yellow')\n        break\n      case 'f':\n        document.getElementById('root').requestFullscreen()\n        return\n      case 'c':\n        audio.play();\n        setstatus('CLAPS')\n        break\n      default:\n        console.log(key)\n        return\n    }\n  }\n\n  function start (e) {\n    e.preventDefault()\n    if (!green) {\n      return startRed()\n    }\n    timer.greenTimer = setTimeout(() => setstatus('green'), green * 60 * 1000)\n    timer.yellowTimer = setTimeout(() => setstatus('yellow'), (+green + 1) * 60 * 1000)\n    timer.redTimer = setTimeout(() => setstatus('red'), (+green + 2) * 60 * 1000)\n    timer.clapTimer = setTimeout(() => {\n      audio.play();\n      setstatus('CLAPS')\n    }, (+green + 2.5) * 60 * 1000)\n\n    document.getElementById('root').requestFullscreen()\n    setstatus('ok')\n  }\n\n  function startRed () {\n    timer.redTimer = setTimeout(() => setstatus('red'), 60 * 1000)\n    timer.clapTimer = setTimeout(() => {\n      audio.play();\n      setstatus('CLAPS')\n    }, 90 * 1000)\n\n    document.getElementById('root').requestFullscreen()\n    setstatus('ok')\n  }\n\n  function stopClap () {\n    audio.pause();\n    audio.currentTime = 0;\n    setstatus('STOP')\n  }\n\n\n  function stop () {\n    clearTimeout(timer.greenTimer)\n    clearTimeout(timer.yellowTimer)\n    clearTimeout(timer.redTimer)\n    clearTimeout(timer.clapTimer)\n    setstatus('STOP')\n  }\n\n  switch (status) {\n    case 'STOP':\n      return (\n        <form id=\"app\" className=\"form\" onSubmit={start}>\n          <div>\n            <img src=\"logo.png\"/>\n            <input type=\"number\" value={green.toFixed(0)} onChange={e => setgreen(+e.target.value % 100)}/>\n            <span>Minutes</span>\n          </div>\n        </form>\n      );\n    case 'CLAPS':\n      return (\n        <div onClick={stopClap} id=\"app\" className=\"CLAPS\">\n          STOP NOW!\n        </div>\n      );\n    default:\n      return (\n        <div onClick={stop} id=\"app\" className={status}>\n          {status}\n        </div>\n      )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}